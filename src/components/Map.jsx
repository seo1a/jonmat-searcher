import { useEffect, useRef, useState } from 'react';


export default function Map({ query, onPlaceSelect, handleSearch, onPlaceClick }) {
    const mapRef = useRef(null);
    const markerRef = useRef(null);
    const [userLocation, setUserLocation] = useState(null);
    const [places, setPlaces] = useState([]); // Í±∞Î¶¨Ïàú Ï†ïÎ†¨ÏùÑ ÏúÑÌïú Í≤ÄÏÉâÎêú Ïû•ÏÜå ÏÉÅÌÉú

    useEffect(() => {
        // Ïπ¥Ïπ¥Ïò§ ÏßÄÎèÑ API Î°úÎìú ÌôïÏù∏
        const checkKakaoLoaded = () => {
            if (window.kakao && window.kakao.maps) {
                initializeMap(); // Ïπ¥Ïπ¥Ïò§ ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî
            } else {
                console.warn("Ïπ¥Ïπ¥Ïò§ ÏßÄÎèÑ Ïä§ÌÅ¨Î¶ΩÌä∏Î•º Î°úÎìú Ï§ë...");
                setTimeout(checkKakaoLoaded, 100); // 100ms ÌõÑ Ïû¨ÏãúÎèÑ
            }
        };

        const initializeMap = () => {
            const { kakao } = window;

            // ÏßÄÎèÑ Ï¥àÍ∏∞ ÏòµÏÖò ÏÑ§Ï†ï
            const mapOptions = {
                center: new kakao.maps.LatLng(37.5666103, 126.9783882), // Ï¥àÍ∏∞ Ï§ëÏã¨ Ï¢åÌëú
                level: 3, // ÏßÄÎèÑÏùò ÌôïÎåÄ Î†àÎ≤® (1~14, Ïà´ÏûêÍ∞Ä ÎÇÆÏùÑÏàòÎ°ù Îçî ÌôïÎåÄÎê®)
            };

            // ÏßÄÎèÑ Í∞ùÏ≤¥ ÏÉùÏÑ± Î∞è DOMÏóê Î†åÎçîÎßÅ
            const map = new kakao.maps.Map(mapRef.current, mapOptions);

            // Ï¥àÍ∏∞ ÎßàÏª§ ÏÉùÏÑ±
            const marker = new kakao.maps.Marker({
                position: mapOptions.center,
                map,
            });

            // ÎßàÏª§ÏôÄ ÏßÄÎèÑ Í∞ùÏ≤¥Î•º refÏóê Ï†ÄÏû•
            markerRef.current = { map, marker, markers: [] };
        
            // ÏÇ¨Ïö©ÏûêÏùò ÏúÑÏπò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const { latitude, longitude } = position.coords;
                        setUserLocation({ latitude, longitude });

                        // ÏÇ¨Ïö©Ïûê ÏúÑÏπòÎ•º ÏßÄÎèÑ Ï§ëÏã¨ÏúºÎ°ú ÏÑ§Ï†ï
                        const userLatLng = new kakao.maps.LatLng(latitude, longitude);
                        map.setCenter(userLatLng);

                        // ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÎßàÏª§ ÏÉùÏÑ±
                        const userMarker = new kakao.maps.Marker({
                            position: userLatLng,
                            map,
                        });

                        markerRef.current.markers.push(userMarker);
                    },
                    (error) => {
                        console.error("ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏñ¥Ïöî:", error);
                        alert("ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏñ¥ Í∏∞Î≥∏ ÏúÑÏπòÎ°ú ÌëúÏãúÎê©ÎãàÎã§!");
                    }
                );
            } else {
                alert("Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
            }
        };

        checkKakaoLoaded();
    }, []);

    useEffect(() => {
        if (!query || !markerRef.current || !userLocation) return;
 
        const { kakao } = window;
        const { latitude, longitude } = userLocation;

        const cleanQuery = query.trim();
        if (cleanQuery.length === 0) {
            console.warn("Query is empty after trimming");
            return;
        }

        const { map, markers } = markerRef.current;

        // Ïù¥Ï†Ñ ÎßàÏª§ ÏÇ≠Ï†ú
        markers.forEach((marker) => marker.setMap(null));
        markerRef.current.markers = [];

        const places = new kakao.maps.services.Places();
        places.keywordSearch(cleanQuery, (result, status) => {
            if (status === kakao.maps.services.Status.OK  && result.length > 0) {
                // ÏÇ¨Ïö©ÏûêÏùò ÏúÑÏπòÏôÄ Í≤ÄÏÉâ Í≤∞Í≥º Í∞ÑÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞ Î∞è Ï†ïÎ†¨
                const sortedResults = result
                    .map((place) => {
                        const distance = getDistanceFromLatLonInKm(
                            latitude,
                            longitude,
                            parseFloat(place.y),
                            parseFloat(place.x)
                        );
                        return { ...place, distance };
                    })
                    .sort((a, b) => a.distance - b.distance); // Í±∞Î¶¨Ïàú Ï†ïÎ†¨

                    setPlaces(sortedResults); // Ï†ïÎ†¨Îêú Í≤∞Í≥ºÎ•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
                    displayMarkers(sortedResults); // ÏßÄÎèÑ ÏóÖÎç∞Ïù¥Ìä∏

                    // üîπ Ï≤´ Î≤àÏß∏ Ïû•ÏÜåÎ™Ö Ï†ÑÎã¨ (Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ïû•ÏÜå)
                    if (sortedResults.length > 0 && onPlaceSelect) {
                        onPlaceSelect(sortedResults[0].place_name, sortedResults[0].id);
                    }

                     // üîπ place_id ÏΩòÏÜî Ï∂úÎ†•
                     console.log("üìå [Map] Ï≤´ Î≤àÏß∏ Ïû•ÏÜå ID:", sortedResults[0].id);
            } else {
                alert("Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
            }
        });
    }, [query, userLocation]);

    const displayMarkers = (sortedResults) => {
        const { kakao } = window;
        const { map, markers } = markerRef.current;

        sortedResults.forEach((place) => {
            const { y, x, place_name } = place;
            const position = new kakao.maps.LatLng(y, x);

            const marker = new kakao.maps.Marker({
                position,
                map,
            });

            markerRef.current.markers.push(marker);

            const infowindow = new kakao.maps.InfoWindow({
                content: `<div style="padding:5px;z-index:1;">${place.place_name}</div>`,
            });

            kakao.maps.event.addListener(marker, 'mouseover', () => infowindow.open(map, marker));
            kakao.maps.event.addListener(marker, 'mouseout', () => infowindow.close());
            console.log(`Place: ${place_name}, Latitude: ${y}, Longitude: ${x}`);
        });

        // ÏßÄÎèÑ Ï§ëÏã¨ÏùÑ Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ïû•ÏÜåÎ°ú ÏÑ§Ï†ï
        const nearestPlace = sortedResults[0];
        const nearestPosition = new kakao.maps.LatLng(nearestPlace.y, nearestPlace.x);
        map.setCenter(nearestPosition);
        
    };

    const handlePlaceClick = (place) => {
        const { kakao } = window;
        const { map, markers } = markerRef.current;

        // Í∏∞Ï°¥ ÎßàÏª§ ÏÇ≠Ï†ú
        markers.forEach((marker) => marker.setMap(null));
        markerRef.current.markers = [];

        const { y, x, place_name } = place;
        const newCenter = new kakao.maps.LatLng(y, x);

        map.setCenter(newCenter);

        const marker = new kakao.maps.Marker({
            position: newCenter,
            map,
        });

        markerRef.current.markers.push(marker);

        const infowindow = new kakao.maps.InfoWindow({
            content: `<div style="padding:5px;z-index:1;">${place_name}</div>`,
        });
        infowindow.open(map, marker);
        console.log(`Place: ${place_name}, Latitude: ${y}, Longitude: ${x}`);
        
        onPlaceSelect(place.place_name, place.id);

        if (onPlaceClick) {
            onPlaceClick(place);
        }
    };

    // Îëê Ï¢åÌëú Í∞ÑÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞ Ìï®Ïàò
    const getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {
        const R = 6371; // ÏßÄÍµ¨Ïùò Î∞òÏßÄÎ¶Ñ (Îã®ÏúÑ: km)
        const dLat = deg2rad(lat2 - lat1);
        const dLon = deg2rad(lon2 - lon1);
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(deg2rad(lat1)) *
                Math.cos(deg2rad(lat2)) *
                Math.sin(dLon / 2) *
                Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // Í±∞Î¶¨ Î∞òÌôò (km Îã®ÏúÑ)
    };

    const deg2rad = (deg) => deg * (Math.PI / 180);

    //195ÌñâÏóê <MapSearchResult places={places} onPlaceClick={handlePlaceClick} />
    return (
        <div>
            <div ref={mapRef} style={{ width: '650px', height: '650px' }} />
            
        </div>
    );
}